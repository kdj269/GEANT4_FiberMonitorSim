#include "stepping.hh"


MySteppingAction::MySteppingAction(MyEventAction *eventAction)
{

	fEventAction = eventAction;
	recordedEvent = 0;
	ParentMom[0] = 0;
	ParentMom[1] = 0;
	ParentMom[2] = 1;

}


MySteppingAction::~MySteppingAction()
{}



void MySteppingAction::UserSteppingAction(const G4Step *step) //add to this a recording of all wavelengths for photons generated, so we can monitor the absorbtion
{
	//G4cout << step->GetTrack()->GetParentID() << G4endl;
	if ((step->GetTrack()->GetParticleDefinition()==G4OpticalPhoton::OpticalPhoton()) && (step->GetTrack()->GetParentID() == 1)) //keep track of highest ID, keep only photons from primary particla
	{
		/*
		if (step->GetTrack()->GetCreatorProcess()->GetProcessName() == "Cerenkov")
		{
			//G4cout << "Cerenkov" << G4endl;
			//step->GetTrack()->SetTrackStatus(fStopAndKill); //kill track
		}
		if (step->GetTrack()->GetCreatorProcess()->GetProcessName() == "Scintillation")
		{
			//G4cout << "Scintillation" << G4endl;
		}
		*/


		G4int evt = G4RunManager::GetRunManager()->GetCurrentEvent()->GetEventID();	
		//G4cout << "New Step!" << G4endl;
		if (evt != recordedEvent)//reset counter for each new event
		{
			std::fill(recorded, recorded+50000,0);
			recordedEvent = evt;
		}

		G4int tracknum = step->GetTrack()->GetTrackID();

		if (tracknum < 0)
		{
			G4cout << "Photon was pushed from prev event, not good!" << G4endl;
		}
		if (recorded[tracknum] == 0) //not yet noted in this event, so we should write it to file
		{
			recorded[tracknum] = 1;
			//G4cout << "New photon found" << G4endl;
			
			G4int type = -1;

			if (step->GetTrack()->GetCreatorProcess()->GetProcessName() == "Cerenkov")
			{
				type = 0;
			}
			if (step->GetTrack()->GetCreatorProcess()->GetProcessName() == "Scintillation")
			{
				type = 1;
			}


			G4StepPoint* preStepPoint = step->GetPreStepPoint();
			G4ThreeVector monPhoton = preStepPoint->GetMomentum();
			G4double wlen = (1.239841939 * eV / monPhoton.mag());//*1E+03;

			G4ThreeVector Mom = step->GetPreStepPoint()->GetMomentumDirection();

			

			//G4cout << sqrt(Mom[0] * Mom[0] + Mom[1] * Mom[1] + Mom[2] * Mom[2]) << G4endl;

			G4double CreationAngle = acos(Mom[0] * ParentMom[0] + Mom[1] * ParentMom[1] + Mom[2] * ParentMom[2]);

			//G4cout << CreationAngle << G4endl;


			G4AnalysisManager* man = G4AnalysisManager::Instance();
			man->FillNtupleIColumn(4, 0, evt);
			man->FillNtupleDColumn(4, 1, wlen);
			man->FillNtupleDColumn(4, 2, tracknum);
			man->FillNtupleDColumn(4, 3, type);
			man->FillNtupleDColumn(4, 4, CreationAngle);
			man->AddNtupleRow(4);


		}

	}
	
	if (!step->GetTrack()->GetNextVolume())
	{
		if (step->GetTrack()->GetParticleDefinition() == G4OpticalPhoton::OpticalPhoton())
		{

			G4StepPoint* preStepPoint = step->GetPreStepPoint();
			G4ThreeVector monPhoton = preStepPoint->GetMomentum();
			G4double wlen = (1.239841939 * eV / monPhoton.mag());//*1E+03;

			G4int evt = G4RunManager::GetRunManager()->GetCurrentEvent()->GetEventID();

			G4int Tracknumber = step->GetTrack()->GetTrackID();

			if (step->GetTrack()->GetParentID() == 1) //only note down, if the photon was generated by the primary. 
			{

				G4int type = -1;

				if (step->GetTrack()->GetCreatorProcess()->GetProcessName() == "Cerenkov")
				{
					type = 0;
				}
				if (step->GetTrack()->GetCreatorProcess()->GetProcessName() == "Scintillation")
				{
					type = 1;
				}
				

				G4AnalysisManager* man = G4AnalysisManager::Instance();
				man->FillNtupleIColumn(3, 0, evt);
				man->FillNtupleDColumn(3, 1, wlen);
				man->FillNtupleDColumn(3, 2, Tracknumber);
				man->FillNtupleDColumn(3, 3, type);
				
				man->AddNtupleRow(3);
			}
			
			//G4cout << "Event " << evt <<" optical photon left the world with wavelength " << wlen << G4endl;

			//G4cout << "Event " << evt <<" optical photon left the world with wavelength " << wlen << " and ID " << step->GetTrack()->GetTrackID() << G4endl;
		} 
	}
	

	if (step->GetTrack()->GetTrackID() == 1) //primary particle
	{
		ParentMom = step->GetTrack()->GetMomentumDirection();
		//G4cout << ParentMom << G4endl;
	}


}
